use "assert"
use "math"

string fn choose_fuse(string[] fuses, const string current_output) {
  string best_fuse = ""
  const float current = <float>current_output[0..-2]
  fuses = fuses.sort(&float (string a, string b): <float>a[0..-2] - <float>b[0..-2])

  every string fuse in fuses {
    const float fuse_rating = <float>fuse[0..-2]
    if fuse_rating >= current
      if best_fuse == "" |: fuse_rating - current < <float>best_fuse[0..-2] - current
        best_fuse = fuse
  }

  best_fuse
}

puts(choose_fuse(["3V", "5V", "12V"], "4.5V"), "5V")
puts(choose_fuse(["5V", "14V", "2V"], "5.5V"), "14V")
puts(choose_fuse(["17V", "15V", "12V"], "9V"), "12V")
## Assert::eq(choose_fuse(["3V", "5V", "12V"], "4.5V"), "5V")
## Assert::eq(choose_fuse(["5V", "14V", "2V"], "5.5V"), "14V")
## Assert::eq(choose_fuse(["17V", "15V", "12V"], "9V"), "12V")