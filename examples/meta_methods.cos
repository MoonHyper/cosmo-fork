use "assert"

class IntSet {
  public int[] vec

  public IntSet fn construct(const int[]? base_vec) {
    $->vec = base_vec |: []
  }

  public void fn push(const int value) {
    $->vec << value
  }

  public void fn display() {
    puts($->vec)
  }

  public IntSet fn add$(const IntSet other) {
    IntSet resultant = new IntSet($->vec)
    every int n in other->vec
      resultant->push(n)

    resultant
  }

  public IntSet fn mul$(const int x) {
    IntSet resultant = new IntSet
    every int i in 1..x
      every int n in $->vec
        resultant->push(n)

    resultant
  }

  public int fn size$() {
    #$->vec
  }
}

const IntSet set_x = new IntSet([1,2,3])
const IntSet set_y = new IntSet([4,5,6])
const IntSet set_z = set_x + set_y
const IntSet set_w = set_x * 3
set_z->display() ## 1,2,3,4,5,6
set_w->display() ## 1,2,3,1,2,3,1,2,3
Assert->eq(#set_z, 6)
Assert->eq(set_z->vec, [1,2,3,4,5,6])
Assert->eq(#set_w, 9)
Assert->eq(set_w->vec, [1,2,3,1,2,3,1,2,3])