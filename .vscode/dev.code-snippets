{
  "Expression Node": {
		"prefix": [ "expr" ],
		"description": "Create the base for an expression node.",
		"body": [
			"module Cosmo::AST::Expression",
      "\tclass ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} < Base",
      "\t\tdef initialize()",
      "\t\tend",
      "\t\t",
      "\t\tdef accept(visitor : Visitor(R)) : R forall R",
      "\t\t\tvisitor.visit_${TM_FILENAME_BASE/(.*)/${1:/lowercase}/g}_expr(self)",
      "\t\tend",
      "\t\t",
      "\t\tdef token : Token",
      "\t\t\t",
      "\t\tend",
      "\t\t",
      "\t\tdef to_s(indent : Int = 0)",
      "\t\t\t\"${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}<\\n\" +",
      "\t\t\t\"  #{TAB * indent} \\n\" +",
      "\t\t\t\"#{TAB * indent}>\"",
      "\t\tend",
      "\tend",
      "end"
		]
	},
  "Statement Node": {
		"prefix": [ "stmt" ],
		"description": "Create the base for a statement node.",
		"body": [
			"module Cosmo::AST::Statement",
      "\tclass ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} < Base",
      "\t\tdef initialize()",
      "\t\tend",
      "\t\t",
      "\t\tdef accept(visitor : Visitor(R)) : R forall R",
      "\t\t\tvisitor.visit_${TM_FILENAME_BASE/(.*)/${1:/lowercase}/g}_stmt(self)",
      "\t\tend",
      "\t\t",
      "\t\tdef token : Token",
      "\t\t\t",
      "\t\tend",
      "\t\t",
      "\t\tdef to_s(indent : Int = 0)",
      "\t\t\t\"${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}<\\n\" +",
      "\t\t\t\"  #{TAB * indent} \\n\" +",
      "\t\t\t\"#{TAB * indent}>\"",
      "\t\tend",
      "\tend",
      "end"
		]
	},
  "Beginner.Codes Challenge": {
		"prefix": [ "challenge" ],
		"description": "Fills out the boilerplate for a Beginner.Codes challenge",
		"body": [
			"use test from \"beginner-codes\"",
      "",
      "${2:typedef} fn ${3:fn_name}(${4}) {",
      "\t${5}",
      "}",
      "",
      "test(${1}, ${3:fn_name})"
		]
	},
}